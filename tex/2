
\section{Introduction}

Matrix Multiplication is one of the principle concepts of Linear Algebra with its applications crucial to the fields of finance, science, engineering and medicine.
The aims of this tutorial are:
\begin{enumerate}
    \item Develop a practical and intuitive understanding of hardware designs
    \item Practise translating mathematical descriptions into hardware designs
    \item Explore the area and performance trade-offs when developing custom hardware
    \item Develop \textit{dot product} and Matrix-Matrix Multiplier blocks
\end{enumerate}

Golub~.et~.al published `Matrix Computations' in 1996 and is considered the industry standard when representing matrix computations both mathematically and algorithmically~\cite{Golub1996}.

\subsection{Vector Notation \& Dot Product}

An $n$ dimensional vector can be represented as :

\begin{equation}
    \textbf{x} \in \mathbb{R}^n \ \ \ \ 
    \iff \ \ \ \ 
    \textbf{x} = 
    \begin{bmatrix}
        x_1 \\
        x_2 \\
        \vdots \\
        x_n
    \end{bmatrix} \ \ \ \
    x_i \in \mathbb{R}
\end{equation}

Additionally, The \textit{dot product} (or \textit{inner product}) of two $n$-vectors involves $n$ multiplication and $n$ additions.
Concretely, the elements of each vector are multiplied pair-wise then accumulated to obtain the final answer.
This has several different mathematical representations.

\begin{equation}
    c = \textbf{x}^{T} \textbf{y}
\end{equation}
\begin{equation}
    c = \sum_{i=1}^{n}x_{i}y_{i}
\end{equation}

Algorithmically this can be represented as:

\begin{lstlisting}
    c = 0
    for i = 1:n
        c = c + x(i)y(i)
    end
\end{lstlisting}

\subsection{Matrix-Matrix Multiplication}

A matrix is a collection of $n$x$m$ elements in row column format.

\begin{equation}
    A \in \mathbb{R}^{nxm} \ \ \ \ 
    \iff \ \ \ \ 
    A = 
    \begin{bmatrix}
        x_{11} & x_{12} & \dots & x_{1m} \\
        x_{21} & x_{22} & \dots & x_{2m} \\
        \vdots & \vdots & \ddots & \vdots \\
        x_{n1} & x_{n2} & \dots & x_{nm}
    \end{bmatrix} \ \ \ \ 
    x_{ij} \in \mathbb{R}
\end{equation}

There are several ways to represent matrix-matrix multiplication, for this tutorial we will be considering the \textit{dot product} formulation.
First consider a 2-by-2 matrix-matrix multiplication:

\begin{equation}
    \begin{split}
    AB = C \ \ \ \ \iff A\in\mathbb{R}^{2x2} \ \  B\in\mathbb{R}^{2x2}  \ \ C\in\mathbb{R}^{2x2} \\
    \begin{bmatrix}
        a & b \\
        c & d 
    \end{bmatrix}
    \begin{bmatrix}
        e & f \\
        g & h 
    \end{bmatrix}
    =
    \begin{bmatrix}
        ae + bg & af + bh \\
        ce + dg & cf + dh 
    \end{bmatrix}
    \end{split}
\end{equation}

By generalising this we produce:

\begin{equation}
    AB = C \ \ \ \ \iff A\in\mathbb{R}^{mxp} \ \  B\in\mathbb{R}^{pxn}  \ \ C\in\mathbb{R}^{mxn} \\
\end{equation}

Notice that each element of the resulting matrix involves a \textit{dot product}.
Algorithmically, this is represented as:

\begin{lstlisting}[mathescape]
    for i = 1:m
        for j = 1:n
            $c_{ij}$ = $\textbf{a}_{i}^{T}\textbf{b}_{j} + c_{ij}$
        end
    end
\end{lstlisting}


Alternativily, the algorithm can be represnted in the $ijk$-format:

\begin{lstlisting}[mathescape]
    for i = 1:n
        for j = 1:p
            for k = 1:m
                C(i,j) = A(i,k)B(k,j) + C(i,j)
            end
        end
    end
\end{lstlisting}


\section{Tutorial Questions}

In answering these questions, marks will be awarded not only for correctness but also understandability and elegance of the solution.
\begin{itemize}
    \item Dot Product Block (15\%): Complete the provided \textit{dot product} block. There is a C program provided as a reference as well as a testbench which will verify the correctness of your block.
    \item Parallel Matrix Multiplication Block (30\%): Using the \textit{dot product} block you made in part 1, make a parallel implementation of a Matrix Multiplication Block. i.e., each \textit{dot product} compute in parallel. As with the previous part there is a C program and testbench.
    \item Serial Matrix Multiplication Block (30\%): Now transform the parallel Matrix Multiplication Block to a serial implementation. This requires that only a single \textit{dot product} computation runs each cycle.
    \item Area and Performance Measure (25\%): Take the 3 architectures developed in parts 1,2 and 3 and generate the synthesis report to extract the area and timing values.
\end{itemize}
